{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null); // useEffect(() => {\n  //   setTimeout(() => {\n  //     fetch(url)\n  //       .then(res => {\n  //         if (!res.ok) {\n  //           throw Error('could not fetch the data for that resourse');\n  //         }\n  //         return res.json();\n  //       })\n  //       .then(data => {\n  //         setData(data);\n  //         setIsPending(false);\n  //         setError(null);\n  //       })\n  //       .catch(err => {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       })\n  //   }, 1000);\n  // }, [url]);\n\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"Z23tQxuo1vwhnz1JJr7Qoh+Ps/M=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/bohdan/FrontEnd/React/books/src/components/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAExB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CAJwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO;AAAEI,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CA5BD;;GAAMN,Q;;AA8BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     fetch(url)\n  //       .then(res => {\n  //         if (!res.ok) {\n  //           throw Error('could not fetch the data for that resourse');\n  //         }\n  //         return res.json();\n  //       })\n  //       .then(data => {\n  //         setData(data);\n  //         setIsPending(false);\n  //         setError(null);\n  //       })\n  //       .catch(err => {\n  //         setIsPending(false);\n  //         setError(err.message);\n  //       })\n  //   }, 1000);\n  // }, [url]);\n\n  return { data, isPending, error }\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}