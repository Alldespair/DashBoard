{"ast":null,"code":"var _jsxFileName = \"/home/bohdan/FrontEnd/React/books/src/components/Home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useFetch from '../hooks/useFetch';\nimport api from '../Api/books';\nimport Dashboard from '../Dashboard/index';\nimport './home.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [books, setBooks] = useState([]);\n\n  const retriveContacts = async () => {\n    const response = fetch(`http://localhost:8000/books`).then(res => {\n      if (!res.ok) {\n        throw Error('could not fetch the data for that resourse');\n      }\n\n      return res.json();\n    }).then(data => {\n      setData(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      setIsPending(false);\n      setError(err.message);\n    });\n    console.log(response);\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getAllBooks = async () => {\n      const allBooks = await retriveContacts();\n      if (allBooks) setBooks(allBooks);\n    };\n\n    getAllBooks();\n  }, []); // const { data: books, isPending, error } = useFetch('http://localhost:8000/books');\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: books && /*#__PURE__*/_jsxDEV(Dashboard, {\n      books: books\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"ww1JAI05mMsgubm5EIyBKqdj5S0=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/bohdan/FrontEnd/React/books/src/components/Home/Home.js"],"names":["React","useEffect","useState","useFetch","api","Dashboard","Home","books","setBooks","retriveContacts","response","fetch","then","res","ok","Error","json","data","setData","setIsPending","setError","catch","err","message","console","log","getAllBooks","allBooks"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAO,aAAP;;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMO,eAAe,GAAG,YAAY;AAClC,UAAMC,QAAQ,GAAIC,KAAK,CAAE,6BAAF,CAAL,CACXC,IADW,CACNC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,cAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KANW,EAOXJ,IAPW,CAONK,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAXW,EAYXC,KAZW,CAYLC,GAAG,IAAI;AACZH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,MAAAA,QAAQ,CAACE,GAAG,CAACC,OAAL,CAAR;AACD,KAfW,CAAlB;AAiBAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ;AACA,WAAOA,QAAQ,CAACO,IAAhB;AACD,GApBD;;AAsBAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,WAAW,GAAG,YAAW;AAC7B,YAAMC,QAAQ,GAAG,MAAMlB,eAAe,EAAtC;AACA,UAAIkB,QAAJ,EAAcnB,QAAQ,CAACmB,QAAD,CAAR;AACf,KAHD;;AAKAD,IAAAA,WAAW;AACZ,GAPQ,EAON,EAPM,CAAT,CA1BiB,CAmCjB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cAGInB,KAAK,iBAAI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AAHb;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA5CD;;GAAMD,I;;KAAAA,I;AA8CN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useFetch from '../hooks/useFetch';\nimport api from '../Api/books';\n\nimport Dashboard from '../Dashboard/index'\n\nimport './home.sass'\n\n\nconst Home = () => {\n\n  const [books, setBooks] = useState([]);\n\n  const retriveContacts = async () => {\n    const response =  fetch(`http://localhost:8000/books`)\n          .then(res => {\n            if (!res.ok) {\n              throw Error('could not fetch the data for that resourse');\n            }\n            return res.json();\n          })\n          .then(data => {\n            setData(data);\n            setIsPending(false);\n            setError(null);\n          })\n          .catch(err => {\n            setIsPending(false);\n            setError(err.message);\n          })\n\n    console.log(response)\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getAllBooks = async() => {\n      const allBooks = await retriveContacts();\n      if (allBooks) setBooks(allBooks);\n    };\n\n    getAllBooks();\n  }, []);\n\n  // const { data: books, isPending, error } = useFetch('http://localhost:8000/books');\n\n  return (\n    <div className=\"dashboard\">\n      {/* { error && <div>{error}</div> }\n      { isPending && <div>Loading...</div> } */}\n      { books && <Dashboard books={books} /> }\n    </div>\n  )\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}