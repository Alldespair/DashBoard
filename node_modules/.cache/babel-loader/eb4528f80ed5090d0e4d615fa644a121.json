{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nconst _apiBase = 'http://localhost:8000';\n\nfunction getData(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(url).then(res => {\n        if (!res.ok) {\n          throw Error('could not fetch the data for that resourse');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        setIsPending(false);\n        setError(err.message);\n      });\n    }, 1000);\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n}\n\n_s(getData, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nfunction postData(data) {\n  _s2();\n\n  const {\n    push\n  } = useHistory();\n  fetch(_apiBase, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(() => {\n    push('/');\n  });\n} // getResource = async (url) => {\n//   const res = await fetch(`${this._apiBase}${url}`);\n//   if (!res.ok) {\n//     throw new Error(`Could not fetch ${url}` +\n//       `, received ${res.status}`)\n//   }\n//   return await res.json();\n// }\n// getAllPeople = async () => {\n//   const res = await this.getResource(`/people/`);\n//   return res.results.map(this._transformPerson);\n// }\n// getPerson = async (id) => {\n//   const person = await this.getResource(`/people/${id}/`);\n//   return this._transformPerson(person);\n// }\n// getAllPlanets = async () => {\n//   const res = await this.getResource(`/planets/`);\n//   return res.results.map(this._transformPlanet)\n// }\n// getPlanet = async (id) => {\n//   const planet = await this.getResource(`/planets/${id}/`);\n//   return this._transformPlanet(planet);\n// }\n// getAllStarships = async () => {\n//   const res = await this.getResource(`/starships/`);\n//   return res.results.map(this._transformStarship);\n// }\n// getStarship = async (id) => {\n//   const starship = this.getResource(`/starships/${id}/`);\n//   return this._transformStarship(starship);\n// }\n// _extractId = (item) => {\n//   const idRegExp = /\\/([0-9]*)\\/$/;\n//   return item.url.match(idRegExp)[1]\n// }\n// _transformPlanet = (planet) => {    \n//   return {\n//     id: this._extractId(planet),\n//     name: planet.name,\n//     population: planet.population,\n//     rotationPeriod: planet.rotation_period,\n//     diameter: planet.diameter\n//   }\n// }\n// _transformStarship = (starship) => {\n//   return {\n//     id: this._extractId(starship),\n//     name: starship.name,\n//     model: starship.model,\n//     manufacturer: starship.manufacturer,\n//     costInCredits: starship.cost_in_credits,\n//     lenth: starship.lenth,\n//     crew: starship.crew,\n//     passengers: starship.passengers,\n//     cargoCapacity: starship.cargo_capacity\n//   }\n// }\n// _transformPerson = (person) => {\n//   return {\n//     id: this._extractId(person),\n//     name: person.name,\n//     gender: person.gender,\n//     birthYear: person.birth_year,\n//     eyeColor: person.eye_color\n//   }\n// }\n\n\n_s2(postData, \"SN3rivdM6JynFVqRWZkIPSEILRo=\", true);","map":{"version":3,"sources":["/home/bohdan/FrontEnd/React/books/src/components/services/api-service.js"],"names":["_apiBase","getData","url","data","setData","useState","isPending","setIsPending","error","setError","useEffect","setTimeout","fetch","then","res","ok","Error","json","catch","err","message","postData","push","useHistory","method","headers","body","JSON","stringify"],"mappings":";;;AAAA,MAAMA,QAAQ,GAAG,uBAAjB;;AAEE,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAAA;;AAEpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AAEAK,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACV,GAAD,CAAL,CACGW,IADH,CACQC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OANH,EAOGJ,IAPH,CAOQV,IAAI,IAAI;AACZC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAXH,EAYGS,KAZH,CAYSC,GAAG,IAAI;AACZZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAACU,GAAG,CAACC,OAAL,CAAR;AACD,OAfH;AAgBD,KAjBS,EAiBP,IAjBO,CAAV;AAkBD,GAnBQ,EAmBN,CAAClB,GAAD,CAnBM,CAAT;AAqBA,SAAO;AAAEC,IAAAA,IAAF;AAAQG,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD;;GA5BQP,O;;AA8BT,SAASoB,QAAT,CAAkBlB,IAAlB,EAAwB;AAAA;;AACtB,QAAM;AAAEmB,IAAAA;AAAF,MAAWC,UAAU,EAA3B;AAEAX,EAAAA,KAAK,CAACZ,QAAD,EAAW;AACdwB,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFK;AAGdC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAezB,IAAf;AAHQ,GAAX,CAAL,CAIGU,IAJH,CAIQ,MAAM;AACZS,IAAAA,IAAI,CAAC,GAAD,CAAJ;AACD,GAND;AAOD,C,CAKD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IA7FSD,Q","sourcesContent":["const _apiBase = 'http://localhost:8000';\n\n  function getData(url) {\n\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n  \n    useEffect(() => {\n      setTimeout(() => {\n        fetch(url)\n          .then(res => {\n            if (!res.ok) {\n              throw Error('could not fetch the data for that resourse');\n            }\n            return res.json();\n          })\n          .then(data => {\n            setData(data);\n            setIsPending(false);\n            setError(null);\n          })\n          .catch(err => {\n            setIsPending(false);\n            setError(err.message);\n          })\n      }, 1000);\n    }, [url]);\n  \n    return { data, isPending, error }\n  }\n\n  function postData(data) {\n    const { push } = useHistory();\n\n    fetch(_apiBase, {\n      method: 'POST',\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data)\n    }).then(() => {\n      push('/')\n    })\n  }\n\n\n\n\n  // getResource = async (url) => {\n  //   const res = await fetch(`${this._apiBase}${url}`);\n\n  //   if (!res.ok) {\n  //     throw new Error(`Could not fetch ${url}` +\n  //       `, received ${res.status}`)\n  //   }\n  //   return await res.json();\n  // }\n\n  // getAllPeople = async () => {\n  //   const res = await this.getResource(`/people/`);\n  //   return res.results.map(this._transformPerson);\n  // }\n\n  // getPerson = async (id) => {\n  //   const person = await this.getResource(`/people/${id}/`);\n  //   return this._transformPerson(person);\n  // }\n\n  // getAllPlanets = async () => {\n  //   const res = await this.getResource(`/planets/`);\n  //   return res.results.map(this._transformPlanet)\n  // }\n\n  // getPlanet = async (id) => {\n  //   const planet = await this.getResource(`/planets/${id}/`);\n  //   return this._transformPlanet(planet);\n  // }\n\n  // getAllStarships = async () => {\n\n  //   const res = await this.getResource(`/starships/`);\n  //   return res.results.map(this._transformStarship);\n  // }\n\n  // getStarship = async (id) => {\n  //   const starship = this.getResource(`/starships/${id}/`);\n  //   return this._transformStarship(starship);\n  // }\n\n  // _extractId = (item) => {\n  //   const idRegExp = /\\/([0-9]*)\\/$/;\n  //   return item.url.match(idRegExp)[1]\n  // }\n\n  // _transformPlanet = (planet) => {    \n  //   return {\n  //     id: this._extractId(planet),\n  //     name: planet.name,\n  //     population: planet.population,\n  //     rotationPeriod: planet.rotation_period,\n  //     diameter: planet.diameter\n  //   }\n  // }\n\n  // _transformStarship = (starship) => {\n  //   return {\n  //     id: this._extractId(starship),\n  //     name: starship.name,\n  //     model: starship.model,\n  //     manufacturer: starship.manufacturer,\n  //     costInCredits: starship.cost_in_credits,\n  //     lenth: starship.lenth,\n  //     crew: starship.crew,\n  //     passengers: starship.passengers,\n  //     cargoCapacity: starship.cargo_capacity\n  //   }\n  // }\n\n  // _transformPerson = (person) => {\n  //   return {\n  //     id: this._extractId(person),\n  //     name: person.name,\n  //     gender: person.gender,\n  //     birthYear: person.birth_year,\n  //     eyeColor: person.eye_color\n  //   }\n  // }\n\n"]},"metadata":{},"sourceType":"module"}